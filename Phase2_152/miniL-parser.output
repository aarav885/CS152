Nonterminals useless in grammar

   expressions


Terminals unused in grammar

   FOR


Rules useless in grammar

   55 expressions: %empty


Rules useless in parser due to conflicts

   52 term2: %empty


State 34 conflicts: 11 reduce/reduce
State 35 conflicts: 11 reduce/reduce
State 40 conflicts: 6 reduce/reduce
State 48 conflicts: 11 reduce/reduce
State 49 conflicts: 11 reduce/reduce
State 63 conflicts: 6 reduce/reduce
State 66 conflicts: 6 reduce/reduce
State 71 conflicts: 11 reduce/reduce
State 74 conflicts: 11 reduce/reduce
State 75 conflicts: 11 reduce/reduce
State 82 conflicts: 11 reduce/reduce
State 83 conflicts: 16 reduce/reduce
State 84 conflicts: 16 reduce/reduce
State 85 conflicts: 15 reduce/reduce
State 86 conflicts: 15 reduce/reduce
State 87 conflicts: 15 reduce/reduce
State 95 conflicts: 11 reduce/reduce
State 113 conflicts: 11 reduce/reduce


Grammar

    0 $accept: prog_start $end

    1 prog_start: functions

    2 functions: %empty
    3          | function functions

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    5 declarations: %empty
    6             | declaration SEMICOLON declarations

    7 declaration: identifiers COLON INTEGER
    8            | identifiers COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER
    9            | identifiers COLON ENUM L_PAREN identifiers R_PAREN

   10 identifiers: ident
   11            | ident COMMA identifiers

   12 ident: IDENT

   13 statements: %empty
   14           | statement SEMICOLON statements

   15 statement: vars ASSIGN expression
   16          | IF bool_exp THEN statements ENDIF
   17          | IF bool_exp THEN statements ELSE statements ENDIF
   18          | WHILE bool_exp BEGINLOOP statements ENDLOOP
   19          | DO BEGINLOOP statements ENDLOOP WHILE bool_exp
   20          | READ vars
   21          | WRITE vars
   22          | CONTINUE
   23          | RETURN expression

   24 bool_exp: relation_and_expr
   25         | relation_and_expr OR relation_and_expr

   26 relation_and_expr: relation_expr
   27                  | relation_expr AND relation_expr

   28 relation_expr: NOT expression comp expression
   29              | NOT TRUE
   30              | NOT FALSE
   31              | NOT R_PAREN bool_exp L_PAREN
   32              | expression comp expression
   33              | TRUE
   34              | FALSE
   35              | R_PAREN bool_exp L_PAREN

   36 comp: EQ
   37     | NEQ
   38     | LT
   39     | GT
   40     | LTE
   41     | GTE

   42 expression: multiplicative_expr
   43           | multiplicative_expr ADD multiplicative_expr
   44           | multiplicative_expr SUB multiplicative_expr

   45 multiplicative_expr: term
   46                    | term MULT term
   47                    | term DIV term
   48                    | term MOD term

   49 term: term1
   50     | term2

   51 term1: %empty

   52 term2: %empty

   53 vars: identifiers
   54     | identifiers L_SQUARE_BRACKET expression R_SQUARE_BRACKET


Terminals, with rules where they appear

$end (0) 0
error (256)
FUNCTION (258) 4
BEGIN_PARAMS (259) 4
END_PARAMS (260) 4
BEGIN_LOCALS (261) 4
END_LOCALS (262) 4
BEGIN_BODY (263) 4
END_BODY (264) 4
INTEGER (265) 7 8
ARRAY (266) 8
OF (267) 8
IF (268) 16 17
THEN (269) 16 17
ENDIF (270) 16 17
ELSE (271) 17
WHILE (272) 18 19
FOR (273)
DO (274) 19
BEGINLOOP (275) 18 19
ENDLOOP (276) 18 19
CONTINUE (277) 22
READ (278) 20
WRITE (279) 21
TRUE (280) 29 33
FALSE (281) 30 34
SEMICOLON (282) 4 6 14
COLON (283) 7 8 9
COMMA (284) 11
L_PAREN (285) 9 31 35
R_PAREN (286) 9 31 35
L_SQUARE_BRACKET (287) 8 54
R_SQUARE_BRACKET (288) 8 54
ASSIGN (289) 15
RETURN (290) 23
ENUM (291) 9
IDENT (292) 12
NUMBER (293) 8
OR (294) 25
AND (295) 27
NOT (296) 28 29 30 31
LT (297) 38
LTE (298) 40
GT (299) 39
GTE (300) 41
EQ (301) 36
NEQ (302) 37
ADD (303) 43
SUB (304) 44
MULT (305) 46
DIV (306) 47
MOD (307) 48


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
prog_start (54)
    on left: 1, on right: 0
functions (55)
    on left: 2 3, on right: 1 3
function (56)
    on left: 4, on right: 3
declarations (57)
    on left: 5 6, on right: 4 6
declaration (58)
    on left: 7 8 9, on right: 6
identifiers (59)
    on left: 10 11, on right: 7 8 9 11 53 54
ident (60)
    on left: 12, on right: 4 10 11
statements (61)
    on left: 13 14, on right: 4 14 16 17 18 19
statement (62)
    on left: 15 16 17 18 19 20 21 22 23, on right: 14
bool_exp (63)
    on left: 24 25, on right: 16 17 18 19 31 35
relation_and_expr (64)
    on left: 26 27, on right: 24 25
relation_expr (65)
    on left: 28 29 30 31 32 33 34 35, on right: 26 27
comp (66)
    on left: 36 37 38 39 40 41, on right: 28 32
expression (67)
    on left: 42 43 44, on right: 15 23 28 32 54
multiplicative_expr (68)
    on left: 45 46 47 48, on right: 42 43 44
term (69)
    on left: 49 50, on right: 45 46 47 48
term1 (70)
    on left: 51, on right: 49
term2 (71)
    on left: 52, on right: 50
vars (72)
    on left: 53 54, on right: 15 20 21


State 0

    0 $accept: . prog_start $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 2 (functions)

    prog_start  go to state 2
    functions   go to state 3
    function    go to state 4


State 1

    4 function: FUNCTION . ident SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 5

    ident  go to state 6


State 2

    0 $accept: prog_start . $end

    $end  shift, and go to state 7


State 3

    1 prog_start: functions .

    $default  reduce using rule 1 (prog_start)


State 4

    3 functions: function . functions

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 2 (functions)

    functions  go to state 8
    function   go to state 4


State 5

   12 ident: IDENT .

    $default  reduce using rule 12 (ident)


State 6

    4 function: FUNCTION ident . SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    SEMICOLON  shift, and go to state 9


State 7

    0 $accept: prog_start $end .

    $default  accept


State 8

    3 functions: function functions .

    $default  reduce using rule 3 (functions)


State 9

    4 function: FUNCTION ident SEMICOLON . BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    BEGIN_PARAMS  shift, and go to state 10


State 10

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS . declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 5

    $default  reduce using rule 5 (declarations)

    declarations  go to state 11
    declaration   go to state 12
    identifiers   go to state 13
    ident         go to state 14


State 11

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarations . END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    END_PARAMS  shift, and go to state 15


State 12

    6 declarations: declaration . SEMICOLON declarations

    SEMICOLON  shift, and go to state 16


State 13

    7 declaration: identifiers . COLON INTEGER
    8            | identifiers . COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER
    9            | identifiers . COLON ENUM L_PAREN identifiers R_PAREN

    COLON  shift, and go to state 17


State 14

   10 identifiers: ident .
   11            | ident . COMMA identifiers

    COMMA  shift, and go to state 18

    $default  reduce using rule 10 (identifiers)


State 15

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarations END_PARAMS . BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY

    BEGIN_LOCALS  shift, and go to state 19


State 16

    6 declarations: declaration SEMICOLON . declarations

    IDENT  shift, and go to state 5

    $default  reduce using rule 5 (declarations)

    declarations  go to state 20
    declaration   go to state 12
    identifiers   go to state 13
    ident         go to state 14


State 17

    7 declaration: identifiers COLON . INTEGER
    8            | identifiers COLON . ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER
    9            | identifiers COLON . ENUM L_PAREN identifiers R_PAREN

    INTEGER  shift, and go to state 21
    ARRAY    shift, and go to state 22
    ENUM     shift, and go to state 23


State 18

   11 identifiers: ident COMMA . identifiers

    IDENT  shift, and go to state 5

    identifiers  go to state 24
    ident        go to state 14


State 19

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS . declarations END_LOCALS BEGIN_BODY statements END_BODY

    IDENT  shift, and go to state 5

    $default  reduce using rule 5 (declarations)

    declarations  go to state 25
    declaration   go to state 12
    identifiers   go to state 13
    ident         go to state 14


State 20

    6 declarations: declaration SEMICOLON declarations .

    $default  reduce using rule 6 (declarations)


State 21

    7 declaration: identifiers COLON INTEGER .

    $default  reduce using rule 7 (declaration)


State 22

    8 declaration: identifiers COLON ARRAY . L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER

    L_SQUARE_BRACKET  shift, and go to state 26


State 23

    9 declaration: identifiers COLON ENUM . L_PAREN identifiers R_PAREN

    L_PAREN  shift, and go to state 27


State 24

   11 identifiers: ident COMMA identifiers .

    $default  reduce using rule 11 (identifiers)


State 25

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations . END_LOCALS BEGIN_BODY statements END_BODY

    END_LOCALS  shift, and go to state 28


State 26

    8 declaration: identifiers COLON ARRAY L_SQUARE_BRACKET . NUMBER R_SQUARE_BRACKET OF INTEGER

    NUMBER  shift, and go to state 29


State 27

    9 declaration: identifiers COLON ENUM L_PAREN . identifiers R_PAREN

    IDENT  shift, and go to state 5

    identifiers  go to state 30
    ident        go to state 14


State 28

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 31


State 29

    8 declaration: identifiers COLON ARRAY L_SQUARE_BRACKET NUMBER . R_SQUARE_BRACKET OF INTEGER

    R_SQUARE_BRACKET  shift, and go to state 32


State 30

    9 declaration: identifiers COLON ENUM L_PAREN identifiers . R_PAREN

    R_PAREN  shift, and go to state 33


State 31

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY . statements END_BODY

    IF        shift, and go to state 34
    WHILE     shift, and go to state 35
    DO        shift, and go to state 36
    CONTINUE  shift, and go to state 37
    READ      shift, and go to state 38
    WRITE     shift, and go to state 39
    RETURN    shift, and go to state 40
    IDENT     shift, and go to state 5

    $default  reduce using rule 13 (statements)

    identifiers  go to state 41
    ident        go to state 14
    statements   go to state 42
    statement    go to state 43
    vars         go to state 44


State 32

    8 declaration: identifiers COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET . OF INTEGER

    OF  shift, and go to state 45


State 33

    9 declaration: identifiers COLON ENUM L_PAREN identifiers R_PAREN .

    $default  reduce using rule 9 (declaration)


State 34

   16 statement: IF . bool_exp THEN statements ENDIF
   17          | IF . bool_exp THEN statements ELSE statements ENDIF

    TRUE     shift, and go to state 46
    FALSE    shift, and go to state 47
    R_PAREN  shift, and go to state 48
    NOT      shift, and go to state 49

    LT        reduce using rule 51 (term1)
    LT        [reduce using rule 52 (term2)]
    LTE       reduce using rule 51 (term1)
    LTE       [reduce using rule 52 (term2)]
    GT        reduce using rule 51 (term1)
    GT        [reduce using rule 52 (term2)]
    GTE       reduce using rule 51 (term1)
    GTE       [reduce using rule 52 (term2)]
    EQ        reduce using rule 51 (term1)
    EQ        [reduce using rule 52 (term2)]
    NEQ       reduce using rule 51 (term1)
    NEQ       [reduce using rule 52 (term2)]
    ADD       reduce using rule 51 (term1)
    ADD       [reduce using rule 52 (term2)]
    SUB       reduce using rule 51 (term1)
    SUB       [reduce using rule 52 (term2)]
    MULT      reduce using rule 51 (term1)
    MULT      [reduce using rule 52 (term2)]
    DIV       reduce using rule 51 (term1)
    DIV       [reduce using rule 52 (term2)]
    MOD       reduce using rule 51 (term1)
    MOD       [reduce using rule 52 (term2)]
    $default  reduce using rule 51 (term1)

    bool_exp             go to state 50
    relation_and_expr    go to state 51
    relation_expr        go to state 52
    expression           go to state 53
    multiplicative_expr  go to state 54
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 35

   18 statement: WHILE . bool_exp BEGINLOOP statements ENDLOOP

    TRUE     shift, and go to state 46
    FALSE    shift, and go to state 47
    R_PAREN  shift, and go to state 48
    NOT      shift, and go to state 49

    LT        reduce using rule 51 (term1)
    LT        [reduce using rule 52 (term2)]
    LTE       reduce using rule 51 (term1)
    LTE       [reduce using rule 52 (term2)]
    GT        reduce using rule 51 (term1)
    GT        [reduce using rule 52 (term2)]
    GTE       reduce using rule 51 (term1)
    GTE       [reduce using rule 52 (term2)]
    EQ        reduce using rule 51 (term1)
    EQ        [reduce using rule 52 (term2)]
    NEQ       reduce using rule 51 (term1)
    NEQ       [reduce using rule 52 (term2)]
    ADD       reduce using rule 51 (term1)
    ADD       [reduce using rule 52 (term2)]
    SUB       reduce using rule 51 (term1)
    SUB       [reduce using rule 52 (term2)]
    MULT      reduce using rule 51 (term1)
    MULT      [reduce using rule 52 (term2)]
    DIV       reduce using rule 51 (term1)
    DIV       [reduce using rule 52 (term2)]
    MOD       reduce using rule 51 (term1)
    MOD       [reduce using rule 52 (term2)]
    $default  reduce using rule 51 (term1)

    bool_exp             go to state 58
    relation_and_expr    go to state 51
    relation_expr        go to state 52
    expression           go to state 53
    multiplicative_expr  go to state 54
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 36

   19 statement: DO . BEGINLOOP statements ENDLOOP WHILE bool_exp

    BEGINLOOP  shift, and go to state 59


State 37

   22 statement: CONTINUE .

    $default  reduce using rule 22 (statement)


State 38

   20 statement: READ . vars

    IDENT  shift, and go to state 5

    identifiers  go to state 41
    ident        go to state 14
    vars         go to state 60


State 39

   21 statement: WRITE . vars

    IDENT  shift, and go to state 5

    identifiers  go to state 41
    ident        go to state 14
    vars         go to state 61


State 40

   23 statement: RETURN . expression

    SEMICOLON  reduce using rule 51 (term1)
    SEMICOLON  [reduce using rule 52 (term2)]
    ADD        reduce using rule 51 (term1)
    ADD        [reduce using rule 52 (term2)]
    SUB        reduce using rule 51 (term1)
    SUB        [reduce using rule 52 (term2)]
    MULT       reduce using rule 51 (term1)
    MULT       [reduce using rule 52 (term2)]
    DIV        reduce using rule 51 (term1)
    DIV        [reduce using rule 52 (term2)]
    MOD        reduce using rule 51 (term1)
    MOD        [reduce using rule 52 (term2)]
    $default   reduce using rule 51 (term1)

    expression           go to state 62
    multiplicative_expr  go to state 54
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 41

   53 vars: identifiers .
   54     | identifiers . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    L_SQUARE_BRACKET  shift, and go to state 63

    $default  reduce using rule 53 (vars)


State 42

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 64


State 43

   14 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 65


State 44

   15 statement: vars . ASSIGN expression

    ASSIGN  shift, and go to state 66


State 45

    8 declaration: identifiers COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF . INTEGER

    INTEGER  shift, and go to state 67


State 46

   33 relation_expr: TRUE .

    $default  reduce using rule 33 (relation_expr)


State 47

   34 relation_expr: FALSE .

    $default  reduce using rule 34 (relation_expr)


State 48

   35 relation_expr: R_PAREN . bool_exp L_PAREN

    TRUE     shift, and go to state 46
    FALSE    shift, and go to state 47
    R_PAREN  shift, and go to state 48
    NOT      shift, and go to state 49

    LT        reduce using rule 51 (term1)
    LT        [reduce using rule 52 (term2)]
    LTE       reduce using rule 51 (term1)
    LTE       [reduce using rule 52 (term2)]
    GT        reduce using rule 51 (term1)
    GT        [reduce using rule 52 (term2)]
    GTE       reduce using rule 51 (term1)
    GTE       [reduce using rule 52 (term2)]
    EQ        reduce using rule 51 (term1)
    EQ        [reduce using rule 52 (term2)]
    NEQ       reduce using rule 51 (term1)
    NEQ       [reduce using rule 52 (term2)]
    ADD       reduce using rule 51 (term1)
    ADD       [reduce using rule 52 (term2)]
    SUB       reduce using rule 51 (term1)
    SUB       [reduce using rule 52 (term2)]
    MULT      reduce using rule 51 (term1)
    MULT      [reduce using rule 52 (term2)]
    DIV       reduce using rule 51 (term1)
    DIV       [reduce using rule 52 (term2)]
    MOD       reduce using rule 51 (term1)
    MOD       [reduce using rule 52 (term2)]
    $default  reduce using rule 51 (term1)

    bool_exp             go to state 68
    relation_and_expr    go to state 51
    relation_expr        go to state 52
    expression           go to state 53
    multiplicative_expr  go to state 54
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 49

   28 relation_expr: NOT . expression comp expression
   29              | NOT . TRUE
   30              | NOT . FALSE
   31              | NOT . R_PAREN bool_exp L_PAREN

    TRUE     shift, and go to state 69
    FALSE    shift, and go to state 70
    R_PAREN  shift, and go to state 71

    LT        reduce using rule 51 (term1)
    LT        [reduce using rule 52 (term2)]
    LTE       reduce using rule 51 (term1)
    LTE       [reduce using rule 52 (term2)]
    GT        reduce using rule 51 (term1)
    GT        [reduce using rule 52 (term2)]
    GTE       reduce using rule 51 (term1)
    GTE       [reduce using rule 52 (term2)]
    EQ        reduce using rule 51 (term1)
    EQ        [reduce using rule 52 (term2)]
    NEQ       reduce using rule 51 (term1)
    NEQ       [reduce using rule 52 (term2)]
    ADD       reduce using rule 51 (term1)
    ADD       [reduce using rule 52 (term2)]
    SUB       reduce using rule 51 (term1)
    SUB       [reduce using rule 52 (term2)]
    MULT      reduce using rule 51 (term1)
    MULT      [reduce using rule 52 (term2)]
    DIV       reduce using rule 51 (term1)
    DIV       [reduce using rule 52 (term2)]
    MOD       reduce using rule 51 (term1)
    MOD       [reduce using rule 52 (term2)]
    $default  reduce using rule 51 (term1)

    expression           go to state 72
    multiplicative_expr  go to state 54
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 50

   16 statement: IF bool_exp . THEN statements ENDIF
   17          | IF bool_exp . THEN statements ELSE statements ENDIF

    THEN  shift, and go to state 73


State 51

   24 bool_exp: relation_and_expr .
   25         | relation_and_expr . OR relation_and_expr

    OR  shift, and go to state 74

    $default  reduce using rule 24 (bool_exp)


State 52

   26 relation_and_expr: relation_expr .
   27                  | relation_expr . AND relation_expr

    AND  shift, and go to state 75

    $default  reduce using rule 26 (relation_and_expr)


State 53

   32 relation_expr: expression . comp expression

    LT   shift, and go to state 76
    LTE  shift, and go to state 77
    GT   shift, and go to state 78
    GTE  shift, and go to state 79
    EQ   shift, and go to state 80
    NEQ  shift, and go to state 81

    comp  go to state 82


State 54

   42 expression: multiplicative_expr .
   43           | multiplicative_expr . ADD multiplicative_expr
   44           | multiplicative_expr . SUB multiplicative_expr

    ADD  shift, and go to state 83
    SUB  shift, and go to state 84

    $default  reduce using rule 42 (expression)


State 55

   45 multiplicative_expr: term .
   46                    | term . MULT term
   47                    | term . DIV term
   48                    | term . MOD term

    MULT  shift, and go to state 85
    DIV   shift, and go to state 86
    MOD   shift, and go to state 87

    $default  reduce using rule 45 (multiplicative_expr)


State 56

   49 term: term1 .

    $default  reduce using rule 49 (term)


State 57

   50 term: term2 .

    $default  reduce using rule 50 (term)


State 58

   18 statement: WHILE bool_exp . BEGINLOOP statements ENDLOOP

    BEGINLOOP  shift, and go to state 88


State 59

   19 statement: DO BEGINLOOP . statements ENDLOOP WHILE bool_exp

    IF        shift, and go to state 34
    WHILE     shift, and go to state 35
    DO        shift, and go to state 36
    CONTINUE  shift, and go to state 37
    READ      shift, and go to state 38
    WRITE     shift, and go to state 39
    RETURN    shift, and go to state 40
    IDENT     shift, and go to state 5

    $default  reduce using rule 13 (statements)

    identifiers  go to state 41
    ident        go to state 14
    statements   go to state 89
    statement    go to state 43
    vars         go to state 44


State 60

   20 statement: READ vars .

    $default  reduce using rule 20 (statement)


State 61

   21 statement: WRITE vars .

    $default  reduce using rule 21 (statement)


State 62

   23 statement: RETURN expression .

    $default  reduce using rule 23 (statement)


State 63

   54 vars: identifiers L_SQUARE_BRACKET . expression R_SQUARE_BRACKET

    R_SQUARE_BRACKET  reduce using rule 51 (term1)
    R_SQUARE_BRACKET  [reduce using rule 52 (term2)]
    ADD               reduce using rule 51 (term1)
    ADD               [reduce using rule 52 (term2)]
    SUB               reduce using rule 51 (term1)
    SUB               [reduce using rule 52 (term2)]
    MULT              reduce using rule 51 (term1)
    MULT              [reduce using rule 52 (term2)]
    DIV               reduce using rule 51 (term1)
    DIV               [reduce using rule 52 (term2)]
    MOD               reduce using rule 51 (term1)
    MOD               [reduce using rule 52 (term2)]
    $default          reduce using rule 51 (term1)

    expression           go to state 90
    multiplicative_expr  go to state 54
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 64

    4 function: FUNCTION ident SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statements END_BODY .

    $default  reduce using rule 4 (function)


State 65

   14 statements: statement SEMICOLON . statements

    IF        shift, and go to state 34
    WHILE     shift, and go to state 35
    DO        shift, and go to state 36
    CONTINUE  shift, and go to state 37
    READ      shift, and go to state 38
    WRITE     shift, and go to state 39
    RETURN    shift, and go to state 40
    IDENT     shift, and go to state 5

    $default  reduce using rule 13 (statements)

    identifiers  go to state 41
    ident        go to state 14
    statements   go to state 91
    statement    go to state 43
    vars         go to state 44


State 66

   15 statement: vars ASSIGN . expression

    SEMICOLON  reduce using rule 51 (term1)
    SEMICOLON  [reduce using rule 52 (term2)]
    ADD        reduce using rule 51 (term1)
    ADD        [reduce using rule 52 (term2)]
    SUB        reduce using rule 51 (term1)
    SUB        [reduce using rule 52 (term2)]
    MULT       reduce using rule 51 (term1)
    MULT       [reduce using rule 52 (term2)]
    DIV        reduce using rule 51 (term1)
    DIV        [reduce using rule 52 (term2)]
    MOD        reduce using rule 51 (term1)
    MOD        [reduce using rule 52 (term2)]
    $default   reduce using rule 51 (term1)

    expression           go to state 92
    multiplicative_expr  go to state 54
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 67

    8 declaration: identifiers COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER .

    $default  reduce using rule 8 (declaration)


State 68

   35 relation_expr: R_PAREN bool_exp . L_PAREN

    L_PAREN  shift, and go to state 93


State 69

   29 relation_expr: NOT TRUE .

    $default  reduce using rule 29 (relation_expr)


State 70

   30 relation_expr: NOT FALSE .

    $default  reduce using rule 30 (relation_expr)


State 71

   31 relation_expr: NOT R_PAREN . bool_exp L_PAREN

    TRUE     shift, and go to state 46
    FALSE    shift, and go to state 47
    R_PAREN  shift, and go to state 48
    NOT      shift, and go to state 49

    LT        reduce using rule 51 (term1)
    LT        [reduce using rule 52 (term2)]
    LTE       reduce using rule 51 (term1)
    LTE       [reduce using rule 52 (term2)]
    GT        reduce using rule 51 (term1)
    GT        [reduce using rule 52 (term2)]
    GTE       reduce using rule 51 (term1)
    GTE       [reduce using rule 52 (term2)]
    EQ        reduce using rule 51 (term1)
    EQ        [reduce using rule 52 (term2)]
    NEQ       reduce using rule 51 (term1)
    NEQ       [reduce using rule 52 (term2)]
    ADD       reduce using rule 51 (term1)
    ADD       [reduce using rule 52 (term2)]
    SUB       reduce using rule 51 (term1)
    SUB       [reduce using rule 52 (term2)]
    MULT      reduce using rule 51 (term1)
    MULT      [reduce using rule 52 (term2)]
    DIV       reduce using rule 51 (term1)
    DIV       [reduce using rule 52 (term2)]
    MOD       reduce using rule 51 (term1)
    MOD       [reduce using rule 52 (term2)]
    $default  reduce using rule 51 (term1)

    bool_exp             go to state 94
    relation_and_expr    go to state 51
    relation_expr        go to state 52
    expression           go to state 53
    multiplicative_expr  go to state 54
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 72

   28 relation_expr: NOT expression . comp expression

    LT   shift, and go to state 76
    LTE  shift, and go to state 77
    GT   shift, and go to state 78
    GTE  shift, and go to state 79
    EQ   shift, and go to state 80
    NEQ  shift, and go to state 81

    comp  go to state 95


State 73

   16 statement: IF bool_exp THEN . statements ENDIF
   17          | IF bool_exp THEN . statements ELSE statements ENDIF

    IF        shift, and go to state 34
    WHILE     shift, and go to state 35
    DO        shift, and go to state 36
    CONTINUE  shift, and go to state 37
    READ      shift, and go to state 38
    WRITE     shift, and go to state 39
    RETURN    shift, and go to state 40
    IDENT     shift, and go to state 5

    $default  reduce using rule 13 (statements)

    identifiers  go to state 41
    ident        go to state 14
    statements   go to state 96
    statement    go to state 43
    vars         go to state 44


State 74

   25 bool_exp: relation_and_expr OR . relation_and_expr

    TRUE     shift, and go to state 46
    FALSE    shift, and go to state 47
    R_PAREN  shift, and go to state 48
    NOT      shift, and go to state 49

    LT        reduce using rule 51 (term1)
    LT        [reduce using rule 52 (term2)]
    LTE       reduce using rule 51 (term1)
    LTE       [reduce using rule 52 (term2)]
    GT        reduce using rule 51 (term1)
    GT        [reduce using rule 52 (term2)]
    GTE       reduce using rule 51 (term1)
    GTE       [reduce using rule 52 (term2)]
    EQ        reduce using rule 51 (term1)
    EQ        [reduce using rule 52 (term2)]
    NEQ       reduce using rule 51 (term1)
    NEQ       [reduce using rule 52 (term2)]
    ADD       reduce using rule 51 (term1)
    ADD       [reduce using rule 52 (term2)]
    SUB       reduce using rule 51 (term1)
    SUB       [reduce using rule 52 (term2)]
    MULT      reduce using rule 51 (term1)
    MULT      [reduce using rule 52 (term2)]
    DIV       reduce using rule 51 (term1)
    DIV       [reduce using rule 52 (term2)]
    MOD       reduce using rule 51 (term1)
    MOD       [reduce using rule 52 (term2)]
    $default  reduce using rule 51 (term1)

    relation_and_expr    go to state 97
    relation_expr        go to state 52
    expression           go to state 53
    multiplicative_expr  go to state 54
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 75

   27 relation_and_expr: relation_expr AND . relation_expr

    TRUE     shift, and go to state 46
    FALSE    shift, and go to state 47
    R_PAREN  shift, and go to state 48
    NOT      shift, and go to state 49

    LT        reduce using rule 51 (term1)
    LT        [reduce using rule 52 (term2)]
    LTE       reduce using rule 51 (term1)
    LTE       [reduce using rule 52 (term2)]
    GT        reduce using rule 51 (term1)
    GT        [reduce using rule 52 (term2)]
    GTE       reduce using rule 51 (term1)
    GTE       [reduce using rule 52 (term2)]
    EQ        reduce using rule 51 (term1)
    EQ        [reduce using rule 52 (term2)]
    NEQ       reduce using rule 51 (term1)
    NEQ       [reduce using rule 52 (term2)]
    ADD       reduce using rule 51 (term1)
    ADD       [reduce using rule 52 (term2)]
    SUB       reduce using rule 51 (term1)
    SUB       [reduce using rule 52 (term2)]
    MULT      reduce using rule 51 (term1)
    MULT      [reduce using rule 52 (term2)]
    DIV       reduce using rule 51 (term1)
    DIV       [reduce using rule 52 (term2)]
    MOD       reduce using rule 51 (term1)
    MOD       [reduce using rule 52 (term2)]
    $default  reduce using rule 51 (term1)

    relation_expr        go to state 98
    expression           go to state 53
    multiplicative_expr  go to state 54
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 76

   38 comp: LT .

    $default  reduce using rule 38 (comp)


State 77

   40 comp: LTE .

    $default  reduce using rule 40 (comp)


State 78

   39 comp: GT .

    $default  reduce using rule 39 (comp)


State 79

   41 comp: GTE .

    $default  reduce using rule 41 (comp)


State 80

   36 comp: EQ .

    $default  reduce using rule 36 (comp)


State 81

   37 comp: NEQ .

    $default  reduce using rule 37 (comp)


State 82

   32 relation_expr: expression comp . expression

    THEN       reduce using rule 51 (term1)
    THEN       [reduce using rule 52 (term2)]
    BEGINLOOP  reduce using rule 51 (term1)
    BEGINLOOP  [reduce using rule 52 (term2)]
    SEMICOLON  reduce using rule 51 (term1)
    SEMICOLON  [reduce using rule 52 (term2)]
    L_PAREN    reduce using rule 51 (term1)
    L_PAREN    [reduce using rule 52 (term2)]
    OR         reduce using rule 51 (term1)
    OR         [reduce using rule 52 (term2)]
    AND        reduce using rule 51 (term1)
    AND        [reduce using rule 52 (term2)]
    ADD        reduce using rule 51 (term1)
    ADD        [reduce using rule 52 (term2)]
    SUB        reduce using rule 51 (term1)
    SUB        [reduce using rule 52 (term2)]
    MULT       reduce using rule 51 (term1)
    MULT       [reduce using rule 52 (term2)]
    DIV        reduce using rule 51 (term1)
    DIV        [reduce using rule 52 (term2)]
    MOD        reduce using rule 51 (term1)
    MOD        [reduce using rule 52 (term2)]
    $default   reduce using rule 51 (term1)

    expression           go to state 99
    multiplicative_expr  go to state 54
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 83

   43 expression: multiplicative_expr ADD . multiplicative_expr

    THEN              reduce using rule 51 (term1)
    THEN              [reduce using rule 52 (term2)]
    BEGINLOOP         reduce using rule 51 (term1)
    BEGINLOOP         [reduce using rule 52 (term2)]
    SEMICOLON         reduce using rule 51 (term1)
    SEMICOLON         [reduce using rule 52 (term2)]
    L_PAREN           reduce using rule 51 (term1)
    L_PAREN           [reduce using rule 52 (term2)]
    R_SQUARE_BRACKET  reduce using rule 51 (term1)
    R_SQUARE_BRACKET  [reduce using rule 52 (term2)]
    OR                reduce using rule 51 (term1)
    OR                [reduce using rule 52 (term2)]
    AND               reduce using rule 51 (term1)
    AND               [reduce using rule 52 (term2)]
    LT                reduce using rule 51 (term1)
    LT                [reduce using rule 52 (term2)]
    LTE               reduce using rule 51 (term1)
    LTE               [reduce using rule 52 (term2)]
    GT                reduce using rule 51 (term1)
    GT                [reduce using rule 52 (term2)]
    GTE               reduce using rule 51 (term1)
    GTE               [reduce using rule 52 (term2)]
    EQ                reduce using rule 51 (term1)
    EQ                [reduce using rule 52 (term2)]
    NEQ               reduce using rule 51 (term1)
    NEQ               [reduce using rule 52 (term2)]
    MULT              reduce using rule 51 (term1)
    MULT              [reduce using rule 52 (term2)]
    DIV               reduce using rule 51 (term1)
    DIV               [reduce using rule 52 (term2)]
    MOD               reduce using rule 51 (term1)
    MOD               [reduce using rule 52 (term2)]
    $default          reduce using rule 51 (term1)

    multiplicative_expr  go to state 100
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 84

   44 expression: multiplicative_expr SUB . multiplicative_expr

    THEN              reduce using rule 51 (term1)
    THEN              [reduce using rule 52 (term2)]
    BEGINLOOP         reduce using rule 51 (term1)
    BEGINLOOP         [reduce using rule 52 (term2)]
    SEMICOLON         reduce using rule 51 (term1)
    SEMICOLON         [reduce using rule 52 (term2)]
    L_PAREN           reduce using rule 51 (term1)
    L_PAREN           [reduce using rule 52 (term2)]
    R_SQUARE_BRACKET  reduce using rule 51 (term1)
    R_SQUARE_BRACKET  [reduce using rule 52 (term2)]
    OR                reduce using rule 51 (term1)
    OR                [reduce using rule 52 (term2)]
    AND               reduce using rule 51 (term1)
    AND               [reduce using rule 52 (term2)]
    LT                reduce using rule 51 (term1)
    LT                [reduce using rule 52 (term2)]
    LTE               reduce using rule 51 (term1)
    LTE               [reduce using rule 52 (term2)]
    GT                reduce using rule 51 (term1)
    GT                [reduce using rule 52 (term2)]
    GTE               reduce using rule 51 (term1)
    GTE               [reduce using rule 52 (term2)]
    EQ                reduce using rule 51 (term1)
    EQ                [reduce using rule 52 (term2)]
    NEQ               reduce using rule 51 (term1)
    NEQ               [reduce using rule 52 (term2)]
    MULT              reduce using rule 51 (term1)
    MULT              [reduce using rule 52 (term2)]
    DIV               reduce using rule 51 (term1)
    DIV               [reduce using rule 52 (term2)]
    MOD               reduce using rule 51 (term1)
    MOD               [reduce using rule 52 (term2)]
    $default          reduce using rule 51 (term1)

    multiplicative_expr  go to state 101
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 85

   46 multiplicative_expr: term MULT . term

    THEN              reduce using rule 51 (term1)
    THEN              [reduce using rule 52 (term2)]
    BEGINLOOP         reduce using rule 51 (term1)
    BEGINLOOP         [reduce using rule 52 (term2)]
    SEMICOLON         reduce using rule 51 (term1)
    SEMICOLON         [reduce using rule 52 (term2)]
    L_PAREN           reduce using rule 51 (term1)
    L_PAREN           [reduce using rule 52 (term2)]
    R_SQUARE_BRACKET  reduce using rule 51 (term1)
    R_SQUARE_BRACKET  [reduce using rule 52 (term2)]
    OR                reduce using rule 51 (term1)
    OR                [reduce using rule 52 (term2)]
    AND               reduce using rule 51 (term1)
    AND               [reduce using rule 52 (term2)]
    LT                reduce using rule 51 (term1)
    LT                [reduce using rule 52 (term2)]
    LTE               reduce using rule 51 (term1)
    LTE               [reduce using rule 52 (term2)]
    GT                reduce using rule 51 (term1)
    GT                [reduce using rule 52 (term2)]
    GTE               reduce using rule 51 (term1)
    GTE               [reduce using rule 52 (term2)]
    EQ                reduce using rule 51 (term1)
    EQ                [reduce using rule 52 (term2)]
    NEQ               reduce using rule 51 (term1)
    NEQ               [reduce using rule 52 (term2)]
    ADD               reduce using rule 51 (term1)
    ADD               [reduce using rule 52 (term2)]
    SUB               reduce using rule 51 (term1)
    SUB               [reduce using rule 52 (term2)]
    $default          reduce using rule 51 (term1)

    term   go to state 102
    term1  go to state 56
    term2  go to state 57


State 86

   47 multiplicative_expr: term DIV . term

    THEN              reduce using rule 51 (term1)
    THEN              [reduce using rule 52 (term2)]
    BEGINLOOP         reduce using rule 51 (term1)
    BEGINLOOP         [reduce using rule 52 (term2)]
    SEMICOLON         reduce using rule 51 (term1)
    SEMICOLON         [reduce using rule 52 (term2)]
    L_PAREN           reduce using rule 51 (term1)
    L_PAREN           [reduce using rule 52 (term2)]
    R_SQUARE_BRACKET  reduce using rule 51 (term1)
    R_SQUARE_BRACKET  [reduce using rule 52 (term2)]
    OR                reduce using rule 51 (term1)
    OR                [reduce using rule 52 (term2)]
    AND               reduce using rule 51 (term1)
    AND               [reduce using rule 52 (term2)]
    LT                reduce using rule 51 (term1)
    LT                [reduce using rule 52 (term2)]
    LTE               reduce using rule 51 (term1)
    LTE               [reduce using rule 52 (term2)]
    GT                reduce using rule 51 (term1)
    GT                [reduce using rule 52 (term2)]
    GTE               reduce using rule 51 (term1)
    GTE               [reduce using rule 52 (term2)]
    EQ                reduce using rule 51 (term1)
    EQ                [reduce using rule 52 (term2)]
    NEQ               reduce using rule 51 (term1)
    NEQ               [reduce using rule 52 (term2)]
    ADD               reduce using rule 51 (term1)
    ADD               [reduce using rule 52 (term2)]
    SUB               reduce using rule 51 (term1)
    SUB               [reduce using rule 52 (term2)]
    $default          reduce using rule 51 (term1)

    term   go to state 103
    term1  go to state 56
    term2  go to state 57


State 87

   48 multiplicative_expr: term MOD . term

    THEN              reduce using rule 51 (term1)
    THEN              [reduce using rule 52 (term2)]
    BEGINLOOP         reduce using rule 51 (term1)
    BEGINLOOP         [reduce using rule 52 (term2)]
    SEMICOLON         reduce using rule 51 (term1)
    SEMICOLON         [reduce using rule 52 (term2)]
    L_PAREN           reduce using rule 51 (term1)
    L_PAREN           [reduce using rule 52 (term2)]
    R_SQUARE_BRACKET  reduce using rule 51 (term1)
    R_SQUARE_BRACKET  [reduce using rule 52 (term2)]
    OR                reduce using rule 51 (term1)
    OR                [reduce using rule 52 (term2)]
    AND               reduce using rule 51 (term1)
    AND               [reduce using rule 52 (term2)]
    LT                reduce using rule 51 (term1)
    LT                [reduce using rule 52 (term2)]
    LTE               reduce using rule 51 (term1)
    LTE               [reduce using rule 52 (term2)]
    GT                reduce using rule 51 (term1)
    GT                [reduce using rule 52 (term2)]
    GTE               reduce using rule 51 (term1)
    GTE               [reduce using rule 52 (term2)]
    EQ                reduce using rule 51 (term1)
    EQ                [reduce using rule 52 (term2)]
    NEQ               reduce using rule 51 (term1)
    NEQ               [reduce using rule 52 (term2)]
    ADD               reduce using rule 51 (term1)
    ADD               [reduce using rule 52 (term2)]
    SUB               reduce using rule 51 (term1)
    SUB               [reduce using rule 52 (term2)]
    $default          reduce using rule 51 (term1)

    term   go to state 104
    term1  go to state 56
    term2  go to state 57


State 88

   18 statement: WHILE bool_exp BEGINLOOP . statements ENDLOOP

    IF        shift, and go to state 34
    WHILE     shift, and go to state 35
    DO        shift, and go to state 36
    CONTINUE  shift, and go to state 37
    READ      shift, and go to state 38
    WRITE     shift, and go to state 39
    RETURN    shift, and go to state 40
    IDENT     shift, and go to state 5

    $default  reduce using rule 13 (statements)

    identifiers  go to state 41
    ident        go to state 14
    statements   go to state 105
    statement    go to state 43
    vars         go to state 44


State 89

   19 statement: DO BEGINLOOP statements . ENDLOOP WHILE bool_exp

    ENDLOOP  shift, and go to state 106


State 90

   54 vars: identifiers L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET  shift, and go to state 107


State 91

   14 statements: statement SEMICOLON statements .

    $default  reduce using rule 14 (statements)


State 92

   15 statement: vars ASSIGN expression .

    $default  reduce using rule 15 (statement)


State 93

   35 relation_expr: R_PAREN bool_exp L_PAREN .

    $default  reduce using rule 35 (relation_expr)


State 94

   31 relation_expr: NOT R_PAREN bool_exp . L_PAREN

    L_PAREN  shift, and go to state 108


State 95

   28 relation_expr: NOT expression comp . expression

    THEN       reduce using rule 51 (term1)
    THEN       [reduce using rule 52 (term2)]
    BEGINLOOP  reduce using rule 51 (term1)
    BEGINLOOP  [reduce using rule 52 (term2)]
    SEMICOLON  reduce using rule 51 (term1)
    SEMICOLON  [reduce using rule 52 (term2)]
    L_PAREN    reduce using rule 51 (term1)
    L_PAREN    [reduce using rule 52 (term2)]
    OR         reduce using rule 51 (term1)
    OR         [reduce using rule 52 (term2)]
    AND        reduce using rule 51 (term1)
    AND        [reduce using rule 52 (term2)]
    ADD        reduce using rule 51 (term1)
    ADD        [reduce using rule 52 (term2)]
    SUB        reduce using rule 51 (term1)
    SUB        [reduce using rule 52 (term2)]
    MULT       reduce using rule 51 (term1)
    MULT       [reduce using rule 52 (term2)]
    DIV        reduce using rule 51 (term1)
    DIV        [reduce using rule 52 (term2)]
    MOD        reduce using rule 51 (term1)
    MOD        [reduce using rule 52 (term2)]
    $default   reduce using rule 51 (term1)

    expression           go to state 109
    multiplicative_expr  go to state 54
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 96

   16 statement: IF bool_exp THEN statements . ENDIF
   17          | IF bool_exp THEN statements . ELSE statements ENDIF

    ENDIF  shift, and go to state 110
    ELSE   shift, and go to state 111


State 97

   25 bool_exp: relation_and_expr OR relation_and_expr .

    $default  reduce using rule 25 (bool_exp)


State 98

   27 relation_and_expr: relation_expr AND relation_expr .

    $default  reduce using rule 27 (relation_and_expr)


State 99

   32 relation_expr: expression comp expression .

    $default  reduce using rule 32 (relation_expr)


State 100

   43 expression: multiplicative_expr ADD multiplicative_expr .

    $default  reduce using rule 43 (expression)


State 101

   44 expression: multiplicative_expr SUB multiplicative_expr .

    $default  reduce using rule 44 (expression)


State 102

   46 multiplicative_expr: term MULT term .

    $default  reduce using rule 46 (multiplicative_expr)


State 103

   47 multiplicative_expr: term DIV term .

    $default  reduce using rule 47 (multiplicative_expr)


State 104

   48 multiplicative_expr: term MOD term .

    $default  reduce using rule 48 (multiplicative_expr)


State 105

   18 statement: WHILE bool_exp BEGINLOOP statements . ENDLOOP

    ENDLOOP  shift, and go to state 112


State 106

   19 statement: DO BEGINLOOP statements ENDLOOP . WHILE bool_exp

    WHILE  shift, and go to state 113


State 107

   54 vars: identifiers L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    $default  reduce using rule 54 (vars)


State 108

   31 relation_expr: NOT R_PAREN bool_exp L_PAREN .

    $default  reduce using rule 31 (relation_expr)


State 109

   28 relation_expr: NOT expression comp expression .

    $default  reduce using rule 28 (relation_expr)


State 110

   16 statement: IF bool_exp THEN statements ENDIF .

    $default  reduce using rule 16 (statement)


State 111

   17 statement: IF bool_exp THEN statements ELSE . statements ENDIF

    IF        shift, and go to state 34
    WHILE     shift, and go to state 35
    DO        shift, and go to state 36
    CONTINUE  shift, and go to state 37
    READ      shift, and go to state 38
    WRITE     shift, and go to state 39
    RETURN    shift, and go to state 40
    IDENT     shift, and go to state 5

    $default  reduce using rule 13 (statements)

    identifiers  go to state 41
    ident        go to state 14
    statements   go to state 114
    statement    go to state 43
    vars         go to state 44


State 112

   18 statement: WHILE bool_exp BEGINLOOP statements ENDLOOP .

    $default  reduce using rule 18 (statement)


State 113

   19 statement: DO BEGINLOOP statements ENDLOOP WHILE . bool_exp

    TRUE     shift, and go to state 46
    FALSE    shift, and go to state 47
    R_PAREN  shift, and go to state 48
    NOT      shift, and go to state 49

    LT        reduce using rule 51 (term1)
    LT        [reduce using rule 52 (term2)]
    LTE       reduce using rule 51 (term1)
    LTE       [reduce using rule 52 (term2)]
    GT        reduce using rule 51 (term1)
    GT        [reduce using rule 52 (term2)]
    GTE       reduce using rule 51 (term1)
    GTE       [reduce using rule 52 (term2)]
    EQ        reduce using rule 51 (term1)
    EQ        [reduce using rule 52 (term2)]
    NEQ       reduce using rule 51 (term1)
    NEQ       [reduce using rule 52 (term2)]
    ADD       reduce using rule 51 (term1)
    ADD       [reduce using rule 52 (term2)]
    SUB       reduce using rule 51 (term1)
    SUB       [reduce using rule 52 (term2)]
    MULT      reduce using rule 51 (term1)
    MULT      [reduce using rule 52 (term2)]
    DIV       reduce using rule 51 (term1)
    DIV       [reduce using rule 52 (term2)]
    MOD       reduce using rule 51 (term1)
    MOD       [reduce using rule 52 (term2)]
    $default  reduce using rule 51 (term1)

    bool_exp             go to state 115
    relation_and_expr    go to state 51
    relation_expr        go to state 52
    expression           go to state 53
    multiplicative_expr  go to state 54
    term                 go to state 55
    term1                go to state 56
    term2                go to state 57


State 114

   17 statement: IF bool_exp THEN statements ELSE statements . ENDIF

    ENDIF  shift, and go to state 116


State 115

   19 statement: DO BEGINLOOP statements ENDLOOP WHILE bool_exp .

    $default  reduce using rule 19 (statement)


State 116

   17 statement: IF bool_exp THEN statements ELSE statements ENDIF .

    $default  reduce using rule 17 (statement)
